let wordSimple = "simple";
let wordString = "Strings";
let frase = "Is" + wordSimple + "to concat" + wordString;
console.log(frase);

// lembrando que nomes de vari√°veis n√£o ficam entre aspas, pois n√£o s√£o Strings

// Sa√≠da: Issimpleto concatStrings

// Como voc√™ pode ver, ele nem sequer separou as palavras, √© poss√≠vel separar adicionando espa√ßos:

frase = "Is " + wordSimple + " to concat " + wordString;
console.log(frase);

// Sa√≠da: Is simple to concat Strings

/* Obs.: usando v√≠rgulas, essa frase j√° teria espa√ßos automaticamente, por√©m, n√£o √© poss√≠vel imprimir essa frase concatenando com v√≠rgulas usando o console.log(frase), por motivos de loucuras do JS, mas √© poss√≠vel colocar a frase diretamente no console.log, da seguinte forma: */

console.log("Is", wordSimple, "to concat", wordString);

// Sa√≠da: Is simple to concat Strings

/* Lembrando que √© uma boa pr√°tica utilizar vari√°veis para armazenar todo tipo de dado que ser√° utilizado m√∫ltiplas vezes no c√≥digo para que n√£o haja repeti√ß√£o e deixe o c√≥digo mais leg√≠vel. Al√©m do fato de que se voc√™ precisar mudar o valor da vari√°vel, voc√™ pode mud√°-la somente uma vez e j√° ter√° mudado em todo o c√≥digo, usando o que chamamos de c√≥digo literal (dados que s√£o est√£o dentro de vari√°veis), voc√™ ter√° que mudar manualmente em cada lugar do c√≥digo que voc√™ utilizou aquele dado. */

// Agora a melhor forma (na minha opini√£o) de concatenar Strings:

frase = (`Is ${wordSimple} to concat ${wordString}`);
console.log(frase);

// Sa√≠da: Is simple to concat Strings

/* Como voc√™s podem ver, a String est√° entre crazes, e as vari√°veis a serem concatenadas est√£o dentro da pr√≥pria String dentro de ${}, o que facilita muito na hora de escrever o c√≥digo! */

console.log("Is", wordSimple, "to\nconcat", wordString);

/* Sa√≠da:
Is simple to
concat Strings */

/* Obs.: o \n tem que estar dentro das aspas e tudo que estiver depois vai aparecer na pr√≥xima linha, portanto, se tivesse um espa√ßo entre o \n e concatenar, o espa√ßo iria junto para a pr√≥xima linha */

/* Mas para quebrar com a "format string" a string entre crazes, basta quebrar a linha no pr√≥prio c√≥digo, da seguinte forma: */

console.log(`Is ${wordSimple} to
concat ${wordString}`);

/* Sa√≠da:
Is simple to
concat Strings */

// Adicionar s√≠mbolos e emojis:

console.log("This frase has an emoji: \u2728");
console.log("This frase has a symbol: \u262D");

/* Sa√≠da:
This frase has an emoji: ‚ú®
This frase has a symbol: ‚ò≠ */

console.log("This frase has an emoji üòÉ");
console.log("This frase has a symbol: ‚Ñ≠");

/* Sa√≠da:
This frase has an emoji: üòÉ
This frase has a symbol: ‚Ñ≠ */

// Para usar aspas dentro da String:

console.log("He read \"The Cremation of Sam McGee\" by R.W. Service.");

// Sa√≠da: He read "The Cremation of Sam McGee" by R.W. Service.

// Observe que se usou uma \ antes das aspas e depois outra \ novamente antes da aspa final

// Para mostra a pr√≥pria \:

console.log("c:\\temp");

// Sa√≠da: c:\temp

// Para quebrar a String em aspas, dentro do c√≥digo, sem que gere uma mensagem de erro:

console.log("This string \
is broke \
in multiple\
lines.");
console.log("Roses are red\n\
Violets are blue,\n\
That your smile\n\
is what seduce me. (Lucas Pedrosa)");

/* Sa√≠da: This string is broke in multiple lines. 
Roses are red
Violets are blue,
That your smile
is what seduce me. (Lucas Pedrosa) */

let a;
let b = null;

console.log(a); // undefined
console.log(b); // null

let answer = 42;
answer = "Thanks for the fishes...";
console.log(typeof("Pablo")); // string
console.log(typeof(3)); // number
console.log(typeof(5.3)); // number
console.log(typeof(true)); // boolean
let list = [1, 2, 3]; // N√£o se preocupe com isso
console.log(typeof(list)); // object
console.log(typeof(a)); // undefined
